package ca.mcgill.ecse321.projectgroup1.service;

import ca.mcgill.ecse321.projectgroup1.dao.LibraryRepository;
import ca.mcgill.ecse321.projectgroup1.model.Client;
import ca.mcgill.ecse321.projectgroup1.model.Employee;
import ca.mcgill.ecse321.projectgroup1.model.Library;

import org.springframework.transaction.annotation.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import ca.mcgill.ecse321.projectgroup1.dao.ClientRepository;
import ca.mcgill.ecse321.projectgroup1.dao.EmployeeRepository;

@Service
public class ManageAccountService {

    @Autowired
    LibraryRepository libraryRepository;

    @Autowired
    EmployeeRepository employeeRepository;

    @Autowired
    ClientRepository clientRepository;

    /**
     * Service method to create a client account
     * 
     * @param library - library the client belongs to
     * @param name - name of the client
     * @param password - password of the client
     * @param address - address of the client
     * @param phoneNumber - phone number of the client
     * @param email - email of the client
     * @param isResident - residency status of the client
     * @return - new client account
     * 
     * @author Emilia
     */
    @Transactional
    public Client createClient(Library library, String name, String password, String address, String phoneNumber, String email, Boolean isResident) {
        
        //id is autogenerated, so it can be ignored here

        String error = "";

        if (library == null) {
            error += "Library must be selected to create a client account!";    
        }

        else if (!libraryRepository.existsByName(library.getName())) {
            error += "library does not exist";
        }

        if (name == null || name.trim().length() == 0) {
            error += "client name cannot be empty!";
        }

        if (password == null || password.trim().length() == 0) {
            error += "Password cannot be empty!";
        }

        if (address == null || address.trim().length() == 0) {
            error += "Address cannot be empty!";
        }

        if (phoneNumber == null || phoneNumber.trim().length() == 0) {
            error += "Phonenumber cannot be empty!";
        }

        if (email == null || email.trim().length() == 0) {
            error += "Email cannot be empty!";
        }

        error = error.trim();
        if (error.length() > 0) {
            throw new IllegalArgumentException(error);
        }

        //if isResodent is null then set it to false
        if (isResident == null) {
            isResident = Boolean.FALSE;
        }

        Client client = new Client();
        client.setLibrary(library);
        client.setName(name);
        client.setPassword(password);
        client.setAddress(address);
        client.setPhoneNumber(phoneNumber);
        client.setEmail(email);
        client.setIsResident(isResident);
        client.setNumOfFlags(0); //numofflags set to 0 when you create a new client account

        clientRepository.save(client);
        return client;
    }

     /**
     * Service method to create an employee account
     * 
     * @param library - library the employee belongs to
     * @param name - name of the employee
     * @param password - password of the employee
     * @param address - address of the employee
     * @param phoneNumber - phone number of the employee
     * @param email - email of the employee
     * @param isResident - residency status of the employee
     * @return - new employee account
     * 
     * @author Emilia
     */
    @Transactional
    public Employee createEmployee(Library library, String name, String password, String address, String phoneNumber, String email, Employee.TypeOfEmployee typeOfEmployee) {
        
        //id is autogenerated, so it can be ignored here

        String error = "";
        if (library == null) {
            error += "Library must be selected to create an employee account!";    
        }
        else if (!libraryRepository.existsByName(library.getName())) {
            error += "library does not exist";
        }
        if (name == null || name.trim().length() == 0) {
            error += "Employee name cannot be empty!";
        }
        if (password == null || password.trim().length() == 0) {
            error += "Password cannot be empty!";
        }
        if (address == null || address.trim().length() == 0) {
            error += "Address cannot be empty!";
        }
        if (phoneNumber == null || phoneNumber.trim().length() == 0) {
            error += "Phonenumber cannot be empty!";
        }
        if (email == null || email.trim().length() == 0) {
            error += "Email cannot be empty!";
        }
        if (typeOfEmployee == null) {
            error += "Must select an employee type!";
        }
        error = error.trim();
        if (error.length() > 0) {
            throw new IllegalArgumentException(error);
        }

        Employee employee = new Employee();
        employee.setLibrary(library);
        employee.setName(name);
        employee.setPassword(password);
        employee.setAddress(address);
        employee.setPhoneNumber(phoneNumber);
        employee.setEmail(email);
        employee.setTypeOfEmployee(typeOfEmployee);

        employeeRepository.save(employee);
        return employee;
    }

     /**
     * Service method to edit a client account
     * 
     * @param library - library the client belongs to
     * @param id - the id of the client account
     * @param name - new name of the client
     * @param password - new password of the client
     * @param address - new address of the client
     * @param phoneNumber - new phone number of the client
     * @param email - new email of the client
     * @param isResident - new residency status of the client
     * @return - modified client account
     * 
     * @author Emilia
     */
    @Transactional
    public Client editClient(Library library, int id, String name, String password, String address, String phoneNumber, String email, int numOfFlags, Boolean isResident) { 
        
        if (!clientRepository.existsById(id)) {
            throw new IllegalArgumentException("Client does not exist!");
        }

        Client client = clientRepository.findById(id);

        //if fields are null set to previous value linked with the client

        if (library == null) {
            library = client.getLibrary();
        }
            
        if (name == null || name.trim().length() == 0) {
            name = client.getName();
        }

        if (password == null || password.trim().length() == 0) {
            password = client.getPassword();
        }

        if (address == null || address.trim().length() == 0) {
            address = client.getAddress();
        }

        if (phoneNumber == null || phoneNumber.trim().length() == 0) {
            phoneNumber = client.getPhoneNumber();
        }

        if (email == null || email.trim().length() == 0) {
            email = client.getEmail();
        }

        if (numOfFlags != 0 && numOfFlags != 1 && numOfFlags != 2 && numOfFlags != 3) {
            throw new IllegalArgumentException("Non-valid number of flags: it should be a number from 0 to 3");
        }

        if (isResident == null) {
            isResident = client.getIsResident();
        }
         
        client.setLibrary(library);
        //client.setId(id);
        client.setName(name);
        client.setPassword(password);
        client.setAddress(address);
        client.setPhoneNumber(phoneNumber);
        client.setEmail(email);
        client.setIsResident(isResident);
        client.setNumOfFlags(numOfFlags);

        clientRepository.save(client);
        return client;

    }

    /**
     * Service method to edit an employee's account
     * 
     * @param library - library the employee belongs to
     * @param id - the id of the employee account
     * @param name - new name of the employee
     * @param password - new password of the employee
     * @param address - new address of the employee
     * @param phoneNumber - new phone number of the employee
     * @param email - new email of the employee
     * @param isResident - new residency status of the employee
     * @return - modified employee account
     * 
     * @author Emilia
     */
    @Transactional
    public Employee editEmployee(Library library, int id, String name, String password, String address, String phoneNumber, String email, Employee.TypeOfEmployee typeOfEmployee) { //cant change employee status, has to delete and create new account

        if (!employeeRepository.existsById(id)) {
            throw new IllegalArgumentException("Employee does not exist!");
        }
        
        Employee employee = employeeRepository.findById(id);
        
        if (library == null) {
            library = employee.getLibrary();
        }
            
        if (name == null || name.trim().length() == 0) {
            name = employee.getName();
        }

        if (password == null || password.trim().length() == 0) {
            password = employee.getPassword();
        }

        if (address == null || address.trim().length() == 0) {
            address = employee.getAddress();
        }

        if (phoneNumber == null || phoneNumber.trim().length() == 0) {
            phoneNumber = employee.getPhoneNumber();
        }

        if (email == null || email.trim().length() == 0) {
            email = employee.getEmail();
        }

        if (typeOfEmployee == null) {
            typeOfEmployee = employee.getTypeOfEmployee();
        }
         
        employee.setLibrary(library);
        //employee.setId(id);
        employee.setName(name);
        employee.setPassword(password);
        employee.setAddress(address);
        employee.setPhoneNumber(phoneNumber);
        employee.setEmail(email);
        employee.setTypeOfEmployee(typeOfEmployee);
        
        employeeRepository.save(employee);
        return employee;
    }

    /**
     * Service method to get a client account
     * 
     * @param id - the id of the client account
     * @return - client account
     * 
     * @author Emilia
     */
    @Transactional 
    public Client getClient(int id) {
    
        if (!clientRepository.existsById(id)) {
            throw new IllegalArgumentException("Client does not exist!");
        }

        Client client = clientRepository.findById(id);

        return client;
    }

    /**
     * Service method to get an employee account
     * 
     * @param id - the id of the employee account
     * @return - employee account
     * 
     * @author Emilia
     */
    @Transactional
    public Employee getEmployee(int id) {
        
        if (!employeeRepository.existsById(id)) {
            throw new IllegalArgumentException("Employee does not exist!");
        }

        Employee employee = employeeRepository.findById(id);

        return employee;
    }

    /**
     * Service method to login to a client account
     * 
     * @param id - the id of the client account
     * @param password - the password of the client account
     * @return - employee account
     * 
     * @author Emilia
     */
    @Transactional
    public Client logInClient(int id, String password) {
        
        if (!clientRepository.existsById(id)) {
            throw new IllegalArgumentException("Client does not exist!");
        }

        Client client = clientRepository.findById(id);

        if (!client.getPassword().equals(password)) {
            throw new IllegalArgumentException("Incorrect password");
        } 

        return client;
    }

    /**
     * Service method to login to an employee account
     * 
     * @param id - the id of the employee account
     * @param password - the password of the employee account
     * @return - employee account
     * 
     * @author Emilia
     */
    @Transactional
    public Employee logInEmployee(int id, String password) {
        
        if (!employeeRepository.existsById(id)) {
            throw new IllegalArgumentException("Employee does not exist!");
        }

        Employee employee = employeeRepository.findById(id);

        if (!employee.getPassword().equals(password)) {
            throw new IllegalArgumentException("Incorrect password");
        } 

        return employee;
    }
}
